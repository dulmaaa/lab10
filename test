#include <iostream>
#include <cmath> // talbai, sqrt, pi too
#include <cstring> // string for example strlen..
#include <cstdlib> // for get a random numbers
#include <vector> // in List erase, insert 

using namespace std;

class Shape {
public:
    static int totalShapes;
    char* name;
    Shape(const char* name) {
        this->name = new char[strlen(name) + 1];
        strcpy(this->name, name);
        totalShapes++;
    }
    ~Shape() {
        delete[] name;
        totalShapes--;
    }
    virtual void print() const {
        cout << "Shape: " << name << endl;
    }
    virtual float calculate_area() const = 0;
    virtual float calculate_perimeter() const = 0;
    static int getTotalShapes() {
        return totalShapes;
    }
};
int Shape::totalShapes = 0;

class _2DShape : public Shape {
public:
    float area, perimeter;
    _2DShape(const char* name) : Shape(name), area(0), perimeter(0) {}
    ~_2DShape() {}
    void print() const override {
        Shape::print();
        cout << "Area: " << area << endl;
        cout << "Perimeter: " << perimeter << endl;
    }
};

class Circle : public _2DShape {
public:
    float radius;
    Circle(const char* name, float radius)
        : _2DShape(name), radius(radius) {
        area = calculate_area();
        perimeter = calculate_perimeter();
    }
    float calculate_area() const override {
        return M_PI * radius * radius;
    }
    float calculate_perimeter() const override {
        return 2 * M_PI * radius;
    }
    void print() const override {
        _2DShape::print();
        cout << "Radius: " << radius << endl;
    }
};

class Square : public _2DShape {
public:
    float length;
    Square(const char* name, float length)
        : _2DShape(name), length(length) {
        area = calculate_area();
        perimeter = calculate_perimeter();
    }
    float calculate_area() const override {
        return length * length;
    }
    float calculate_perimeter() const override {
        return 4 * length;
    }
    void print() const override {
        _2DShape::print();
        cout << "Length: " << length << endl;
    }
};

class Triangle : public _2DShape {
public:
    float length;
    Triangle(const char* name, float length)
        : _2DShape(name), length(length) {
        area = calculate_area();
        perimeter = calculate_perimeter();
    }
    float calculate_area() const override {
        return 0.25 * sqrt(3) * length * length;
    }
    float calculate_perimeter() const override {
        return 3 * length;
    }
    void print() const override {
        _2DShape::print();
        cout << "Length: " << length << endl;
    }
};

template <typename T>
class List {
    vector<T*> elements;
public:
    void add(T* t) { // Сүүлд нь элемент нэмэх 
        elements.push_back(t);
    }
    void insert(T* t, int index) { // index дүгээрт элемент оруулах
        if (index >= 0 && index <= elements.size()) {
            elements.resize(elements.size() + 1);
            for (int i = elements.size() - 1; i > index; --i) {
                elements[i] = elements[i - 1];
            }
            elements[index] = t;
        } else {
            cout << "Invalid index!" << endl;
        }
    }
    T* get(int index) { // index-дүгээрх элемент буцаах 
        if (index >= 0 && index < elements.size()) {
            return elements[index];
        }
        return nullptr;
    }
    void remove(int index) { // i-р элементийг устгах
        if (index >= 0 && index < elements.size()) {
            delete elements[index];
            for (int i = index; i < elements.size() - 1; ++i) {
                elements[i] = elements[i + 1];
            }
            elements.resize(elements.size() - 1);
        } else {
            cout << "Invalid index!" << endl;
        }
    }
    int length() { // жагсаалтын уртыг буцаах
        return elements.size();
    }
    void sort_by_area() { // Талбайгаар эрэмбэлэх
        int n = elements.size();
        for (int i = 0; i < n - 1; ++i) {
            for (int j = 0; j < n - i - 1; ++j) {
                if (elements[j]->calculate_area() > elements[j + 1]->calculate_area()) {
                    // Солих 
                    T* temp = elements[j];
                    elements[j] = elements[j + 1];
                    elements[j + 1] = temp;
                }
            }
        }
    }

    void print() { // бүх элементийг хэвлэх 
        for (int i = 0; i < elements.size(); ++i) {
            elements[i]->print();
            cout << endl;
        }
    }

    ~List() { // Устгагч 
        for (int i = 0; i < elements.size(); ++i) {
            delete elements[i];
        }
    }
};

int main() {

    List<_2DShape> shapes; // Дүрсүүдийн жагсаалт үүсгэж байна.

    int numShapes = rand() % 11 + 20; // 20-30 хооронд санамсаргүй тоо сонгох
    for (int i = 0; i < numShapes; ++i) {
        int shapeType = rand() % 3; // санамсаргүй дүрс үүсгэхийн тулд дүрсийн төрлийг сонгож байгаа
        _2DShape* shape = nullptr;
        switch (shapeType) {
            case 0: {
                float radius = rand() % 100 + 1;
                shape = new Circle("Circle", radius);
                break;
            }
            case 1: {
                float length = rand() % 100 + 1;
                shape = new Square("Square", length);
                break;
            }
            case 2: {
                float length = rand() % 100 + 1;
                shape = new Triangle("Triangle", length);
                break;
            }
        }
        shapes.add(shape); 
    }

    int choice1;

    do {
        cout << "Select an action to perform" << endl;
        cout << "1. Дүрс нэмэх" << endl;
        cout << "2. Жагсаалтын дунд дүрс нэмэх " << endl;
        cout << "3. Аль нэг элементийн утгыг хэвлэх" << endl;
        cout << "4. Аль нэг элементийг устгах" << endl;
        cout << "5. Дүрсийн тоог хэвлэх" << endl;
        cout << "6. Талбайгаар эрэмбэлэх" << endl;
        cout << "7. Бүх дүрс хэвлэх" << endl;
        cout << "8. Гарах" << endl;
        cout << "Хийх үйлдлээ сонгоно уу: ";
        cin >> choice1;

        switch(choice1) {
            case 1: {
                int shapeType = rand() % 3;
                _2DShape* shape = nullptr;
                switch (shapeType) {
                    case 0: {
                        float radius = rand() % 100 + 1;
                        shape = new Circle("Circle", radius);
                        break;
                    }
                    case 1: {
                        float length = rand() % 100 + 1;
                        shape = new Square("Square", length);
                        break;
                    }
                    case 2: {
                        float length = rand() % 100 + 1;
                        shape = new Triangle("Triangle", length);
                        break;
                    }
                }
                shapes.add(shape);
                break;
            }
            case 2: {
                int index; //index+1-р байранд орно
                cout << "Хэдэд оруулах вэ?: ";
                cin >> index;
                int shapeType = rand() % 3;//0-2
                _2DShape* shape = nullptr;
                switch (shapeType) {
                    case 0: {
                        float radius = rand() % 100 + 1; //1-100 
                        shape = new Circle("Circle", radius);
                        break;
                    }
                    case 1: {
                        float length = rand() % 100 + 1; //1-100 
                        shape = new Square("Square", length);
                        break;
                    }
                    case 2: {
                        float length = rand() % 100 + 1;//1-100 
                        shape = new Triangle("Triangle", length);
                        break;
                    }
                }
                
                shapes.insert(shape, index);//Дунд нь элемент оруулах
                break;
            }
            case 3: {// Элементийг хэвлэх
                int index; //3 гэвэл 4 дэх элемент
                cout << "Элементийн дугаарыг оруулна уу: ";
                cin >> index;
                _2DShape* shape = shapes.get(index);
                if (shape) {
                    shape->print();
                } else {
                    cout << "Invalid index!" << endl;
                }
                break;
            }
            case 4: {//Дундаас нь дүрс устгах 3 гэж өгвөл 4 дэх дүрс устана.
                int index;
                cout << "Устгах элементийн дугаарыг оруулна уу: ";
                cin >> index;
                shapes.remove(index);
                break;
            }
            case 5: { //Нийт дүрсийн тоог хэвлэх
                cout << "Нийт дүрсийн тоо: " << shapes.length() << endl;
                break;
            }
            case 6: {//Талбайгаар хэвлэх
                shapes.sort_by_area();
                cout << "Талбайгаар эрэмбэлсэн." << endl;
                break;
            }
            case 7: {//дүрсүүдийг хэвлэх
                shapes.print();
                break;
            }
            case 8: {
                cout << "Гарч байна..." << endl;
                break;
            }
            default: {
                cout << "1-8 сонгоно уу." << endl;
                break;
            }
        }
    } while (choice1 != 8);

    return 0;
}
